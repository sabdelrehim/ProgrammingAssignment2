}
printmessaage()
printmessaage(x)
printmessaage(1)
printmessaage(NA)
printmessaage <- function(x){
if (is.na(x))
print("x is a missing value!")
else if (x > 0)
print("x is greater than 0")
else
print("x is less than or equal to 0")
invisible(x)
}
printmessaage(-1)
x <- log(-1)
printmessaage(x)
library(datasets)
data(iris)
?iris
?sapply
sapply(iris, function(x) mean(x"[",iris$Sepal.Length))
sapply(iris, function(x) mean(c(x"[",iris$Sepal.Length))
sapply(iris, function(x) mean(c(x"[",iris$Sepal.Length)))
sapply(iris, mean, iris$Sepal.Length)
iris
x <- list(c(iris$Sepal.Length))
x
sapply(x,mean)
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data("mtcars")
metcara
metcars
mtcars
?mtcars
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl,mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
class(x)
x[1]
x[3]
x[3] - x[1]
debug(ls)
ls
getwd()
setwd("C:/Dev/Rprogramming/progassign2/ProgrammingAssignment2")
getwd()
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## This function computes the inverse of the special "matrix"
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting inverted matrix cached data")
return(solve(m))
}
data <- x$get()
m <- lapply(data, mean)
x$setmean(m)
m
}
mat <- matrix(c(10,30,50), c(60,80,90), ncol = 3)
mat
mat <- matrix(c(10,30,50,60,80,90), ncol = 3)
mat
mat <- matrix(c(10,30,50,60,80,90, 5, 7, 9), ncol = 3)
mat
cacheSolve(mat)
solve(mat)
mat
solve(5, 10)
solve(5, 15)
makeCacheMatrix(mat)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- c(20,10,5,6,17)
v
cachemean((v))
cachemean(v)
x
makeVector()
cachemean(v)
makeVector(v)
mvec <- makeVector()
mvec$set(x)
mvec$set(v)
mvec$get()
mvec$get()
mvec$getmean()
mvec$setmean(3.4)
mvec$getmean()
cachemean(v)
cachemean(mvec)
mmat <- makeCacheMatrix()
mmat$set(mat)
mmat$get()
cacheSolve(mmat)
nrow(mat)
ncol(mat)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting inverted matrix cached data")
return(solve(m))
}
data <- x$get()
## nr <- nrow(data)
## nc <- ncol(data)
m <- apply(data, mean)
## m <- matrix(m, nrow = nr, ncol = nc)
x$setmean(m)
m
}
cacheSolve(mmat)
mmat
cacheSolve(mat)
mat
mmat <- makeCacheMatrix()
mmat$set(mat)
cacheSolve(mmat)
mmat$get()
mat
mat1 <- matrix(c(30,10,10,30), nrow=2, ncol=2)
mat1
mat === mat1
mat == mat1
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set <- function(y) {
x <<- y
invm <<- NULL
}
get <- function() x
setinvm <- function(invmat) invm <<- invmat
getinvm <- function() invm
## list(set = set, get = get,
##       setinvmat = setinvmat,
##       getinvmat = getinvmat)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinvmat()
if(!is.null(m)){
if (m == solve(x$get())) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
data <- x$get()
x$setinvm(data)
x$getinvm()
}
mmat <- makeCacheMatrix()
mmat$set(mat)
mmat <- makeCacheMatrix()
mmat
mat
mmtx <- makeCacheMatrix()
mmtx
mmtx()
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set <- function(y) {
x <<- y
invm <<- NULL
}
get <- function() x
setimat <- function(invmat) invm <<- invmat
getimat <- function() invm
list(set = set, get = get,
setinvm = setinvm,
getinvm = getinvm)
}
mmtx <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set <- function(y) {
x <<- y
invm <<- NULL
}
get <- function() x
setimat <- function(invmat) invm <<- invmat
getimat <- function() invm
list(set = set, get = get,
setimat = setimat,
getimat = getimat)
}
mmtx <- makeCacheMatrix()
mmtx
mmtx$set(mat)
mmtx$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinvm()
message("after 1")
if(!is.null(m)){
message("m is not null")
if (m == solve(x$get())) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
message("m is not null")
if (m == solve(x$get())) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
message("m is not null" + x$get())
if (m == solve(x$get())) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
message(x$get())
##   message("m is not null" + x$get())
if (m == solve(x$get())) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
message(x$get())
message(m)
##   message("m is not null" + x$get())
if (m == solve(x$get())) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
m1 <- solve(x$get())
message("m is not null")
if (m == m1) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
m1 <- solve(x$get())
message("m is not null")
if (all.equal(m, m1)) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
m1 <- solve(x$get())
message("m is not null")
if (identical(m, m1)) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
m1 <- solve(x$get())
message("m is not null")
message(identical(m, m1))
if (identical(m, m1)) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(data)
x$getimat()
}
cacheSolve(mmtx)
solve(mat)
solve(mat)
class(solve(mat))
class(mmat$getimat())
mmat$getimat()
class(mmtx$getimat())
identical(mmtx$getimat(), solve(mat))
solve(mat)
mmtx$getimat()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
m1 <- solve(x$get())
message("m is not null")
message(identical(m, m1))
if (identical(m, m1)) {
message("getting inverted matrix cached data")
return(solve(m))
}
}
message("Before setting data")
data <- x$get()
x$setimat(solve(data))
x$getimat()
}
cacheSolve(mmtx)
cacheSolve(mmtx)
cacheSolve(mmtx)
mmtx$set(mat)
cacheSolve(mmtx)
cacheSolve(mmtx)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
m1 <- solve(x$get())
message("m is not null")
message(identical(m, m1))
if (identical(m, m1)) {
message("getting inverted matrix cached data")
return m
}
}
message("Before setting data")
data <- x$get()
x$setimat(solve(data))
x$getimat()
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
message("after 1")
if(!is.null(m)){
m1 <- solve(x$get())
message("m is not null")
message(identical(m, m1))
if (identical(m, m1)) {
message("getting inverted matrix cached data")
return (m)
}
}
message("Before setting data")
data <- x$get()
x$setimat(solve(data))
x$getimat()
}
mmtx$set(mat)
cacheSolve(mmtx)
cacheSolve(mmtx)
cacheSolve(mmtx)
cacheSolve(mmtx)
mmtx
mat
mat <- mat + 1
mat
mmtx$set(mat)
cacheSolve(mmtx)
cacheSolve(mmtx)
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set <- function(y) {
x <<- y
invm <<- NULL
}
get <- function() x
setimat <- function(invmat) invm <<- invmat
getimat <- function() invm
list(set = set, get = get,
setimat = setimat,
getimat = getimat)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
if(!is.null(m)){
m1 <- solve(x$get())
if (identical(m, m1)) {
message("getting inverted matrix cached data")
return (m)
}
}
data <- x$get()
x$setimat(solve(data))
x$getimat()
}
mobj <- makeCacheMatrix()
mobj$set(mat)
mobj$get()
cacheSolve(mobj)
cacheSolve(mobj)
cacheSolve(mobj)
mat <- mat -1
mat
mobj$set(mat)
cacheSolve(mobj)
cacheSolve(mobj)
